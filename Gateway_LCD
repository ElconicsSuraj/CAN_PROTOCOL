#include <Wire.h>
#include "time.h"
#include <WiFiManager.h>
#include <WiFi.h>
#include <FirebaseESP32.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x3F, 21, 22);
#define FIREBASE_HOST "https://esp32cam-36ba2-default-rtdb.asia-southeast1.firebasedatabase.app/"
#define FIREBASE_AUTH "AIzaSyC9lHE4bU-kml886tgeoNnvTkSR4yYQWUs"
#define WIFI_SSID "Elconics"
#define WIFI_PASSWORD "Elconics@123" //        "Lifetrust@123"


//Define FirebaseESP32 data object
FirebaseData firebaseData;
FirebaseJson json;



#define RXp2 16
#define TXp2 17
void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  Serial2.begin(9600, SERIAL_8N1, RXp2, TXp2);
  lcd.begin();                      // initialize the lcd
  //  lcd.init();
  // Print a message to the LCD.
  lcd.backlight();


  WiFi.mode(WIFI_STA); // explicitly set mode, esp defaults to STA+AP
  // it is a good practice to make sure your code sets wifi mode how you want it.


  //WiFiManager, Local intialization. Once its business is done, there is no need to keep it around
  WiFiManager wm;

  // reset settings - wipe stored credentials for testing
  // these are stored by the esp library
  //wm.resetSettings();

  // Automatically connect using saved credentials,
  // if connection fails, it starts an access point with the specified name ( "AutoConnectAP"),
  // if empty will auto generate SSID, if password is blank it will be anonymous AP (wm.autoConnect())
  // then goes into a blocking loop awaiting configuration and will return success result

  bool res;
  // res = wm.autoConnect(); // auto generated AP name from chipid
  res = wm.autoConnect("LongRoom Basement"); // anonymous ap
  //  res = wm.autoConnect("AutoConnectAP","password"); // password protected ap
      lcd.setCursor(0, 0);
    lcd.print("Change Password");

  if (!res) {
    Serial.println("Failed to connect");
    // ESP.restart();
     lcd.setCursor(0, 0);
    lcd.print("Failed To Connect");
    lcd.scrollDisplayLeft();
  }
  else {
    //if you get here you have connected to the WiFi
    Serial.println("connected...yeey :)");
  }
  //connect to WiFi
  // Serial.printf("Connecting to %s ", ssid);
  WiFi.begin();
  while (WiFi.status() != WL_CONNECTED) {
    lcd.setCursor(0, 0);
    lcd.print("Network Issue");
    delay(500);
    Serial.print(".");
 
  }
  Serial.println(" CONNECTED");
  lcd.setCursor(0, 0);
  lcd.print(" CONNECTED ");
  delay(1000);
  lcd.clear();


  //disconnect WiFi as it's no longer needed
  WiFi.disconnect(true);
  WiFi.mode(WIFI_OFF);













  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);
  Firebase.reconnectWiFi(true);

  //Set database read timeout to 1 minute (max 15 minutes)
  Firebase.setReadTimeout(firebaseData, 1000 * 60);
  //tiny, small, medium, large and unlimited.
  //Size and its write timeout e.g. tiny (1s), small (10s), medium (30s) and large (60s).
  Firebase.setwriteSizeLimit(firebaseData, "tiny");

  /*
    This option allows get and delete functions (PUT and DELETE HTTP requests) works for device connected behind the
    Firewall that allows only GET and POST requests.

    Firebase.enableClassicRequest(firebaseData, true);
  */

  //String path = "/data";


}
void loop() {
  Serial.println("Message Received: ");
  String Data =  Serial2.readString();
  Serial.println(Data);

  delay(2000);
  //  Serial.println(Data.substring(0,1));
  //Serial.println(Data.substring(22,24)); // This is Tempreture
  //Serial.println(Data.substring(38,40)); // This is Humidity
  Serial.flush();
  String id = Data.substring(0, 1);


  if (id == String("1") )
  {
    Serial.println("My id is CAGE 1");
    String T = Data.substring(22, 24);
    String H = Data.substring(38, 40);
    //Serial.println(T); // This is Tempreture
    //Serial.println(H); // This is Humidity
    Serial.println(T.toInt());
    Serial.println(H.toInt());
    json.set("/CAGE1 Temp", T.toInt());
    json.set("/CAGE1 Humi", H.toInt());
    Firebase.updateNode(firebaseData, "/CAN", json);
    lcd.setCursor(4, 0);
    lcd.print("CAGE 1");
    lcd.setCursor(0, 1);
    lcd.print("Temp:" + String(T));
    lcd.setCursor(9, 1);
    lcd.print("Humi:" + String(H));

    delay(1000);
   // lcd.clear();
  }
  delay(100);
  Serial.flush();
  delay(2000);
  if (id == String("2") )
  {
    String T = Data.substring(22, 24);
    String H = Data.substring(38, 40);
    Serial.println("My id is CAGE 2");
    // Serial.println(Data.substring(22,24)); // This is Tempreture
    //Serial.println(Data.substring(38,40)); // This is Humidity
    Serial.println(T.toInt());
    Serial.println(H.toInt());
    json.set("/CAGE2 Temp", T.toInt());
    json.set("/CAGE2 Humi", H.toInt());
    Firebase.updateNode(firebaseData, "/CAN", json);
    lcd.setCursor(4, 0);
    lcd.print("CAGE 2");
    lcd.setCursor(0, 1);
    lcd.print("Temp:" + String(T));
    lcd.setCursor(9, 1);
    lcd.print("Humi:" + String(H));


    delay(1000);
   // lcd.clear();
  }
  Serial.flush();





}








